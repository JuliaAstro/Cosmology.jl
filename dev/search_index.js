var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API/Reference","title":"API/Reference","text":"DocTestSetup = :(using Cosmology, Unitful, UnitfulAstro)","category":"page"},{"location":"api/#API/Reference","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"tip: Unitful\nUnitful.jl works seamlessly with Cosmology.jl. In order to use its features, make sure it is installed and imported, along with UnitfulAstro.pkg> add Unitful UnitfulAstro\njulia> using Unitful, UnitfulAstro","category":"page"},{"location":"api/#Cosmological-Models","page":"API/Reference","title":"Cosmological Models","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"cosmology","category":"page"},{"location":"api/#Cosmology.cosmology","page":"API/Reference","title":"Cosmology.cosmology","text":"cosmology(;h = 0.69,\n           Neff = 3.04,\n           OmegaK = 0,\n           OmegaM = 0.29,\n           OmegaR = nothing,\n           Tcmb = 2.7255,\n           w0 = -1,\n           wa = 0)\n\nParameters\n\nh - Dimensionless Hubble constant\nOmegaK - Curvature density (Ω_k)\nOmegaM - Matter density (Ω_m)\nOmegaR - Radiation density (Ω_r)\nTcmb - CMB temperature in Kelvin; used to compute Ω_γ\nNeff - Effective number of massless neutrino species; used to compute Ω_ν\nw0 - CPL dark energy equation of state; w = w0 + wa(1-a)\nwa - CPL dark energy equation of state; w = w0 + wa(1-a)\n\nExamples\n\njulia> c = cosmology()\nCosmology.FlatLCDM{Float64}(0.69, 0.7099122024007928, 0.29, 8.77975992071536e-5)\n\njulia> c = cosmology(OmegaK=0.1)\nCosmology.OpenLCDM{Float64}(0.69, 0.1, 0.6099122024007929, 0.29, 8.77975992071536e-5)\n\njulia> c = cosmology(w0=-0.9, OmegaK=-0.1)\nCosmology.ClosedWCDM{Float64}(0.69, -0.1, 0.8099122024007929, 0.29, 8.77975992071536e-5, -0.9, 0.0)\n\n\n\n\n\n","category":"function"},{"location":"api/#Distances","page":"API/Reference","title":"Distances","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"angular_diameter_dist\ncomoving_radial_dist\nluminosity_dist\ndistmod","category":"page"},{"location":"api/#Cosmology.angular_diameter_dist","page":"API/Reference","title":"Cosmology.angular_diameter_dist","text":"angular_diameter_dist([u::Unitlike,] c::AbstractCosmology, [z₁,] z₂)\n\nRatio of the proper transverse size in Mpc of an object at redshift z₂ to its angular size in radians, as seen by an observer at z₁.  Redshift z₁ defaults to 0 if omitted.  Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.comoving_radial_dist","page":"API/Reference","title":"Cosmology.comoving_radial_dist","text":"comoving_radial_dist([u::Unitlike,] c::AbstractCosmology, [z₁,] z₂)\n\nComoving radial distance in Mpc at redshift z₂ as seen by an observer at z₁.  Redshift z₁ defaults to 0 if omitted.  Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.luminosity_dist","page":"API/Reference","title":"Cosmology.luminosity_dist","text":"luminosity_dist([u::Unitlike,] c::AbstractCosmology, z)\n\nBolometric luminosity distance in Mpc at redshift z. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.distmod","page":"API/Reference","title":"Cosmology.distmod","text":"distmod(c::AbstractCosmology, z)\n\nDistance modulus in magnitudes at redshift z.\n\n\n\n\n\n","category":"function"},{"location":"api/#Examples","page":"API/Reference","title":"Examples","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"julia> c = cosmology(OmegaM=0.26)\nCosmology.FlatLCDM{Float64}(0.69, 0.7399122024007928, 0.26, 8.77975992071536e-5)\n\njulia> angular_diameter_dist(c, 1.2)\n1784.0089227105113 Mpc\n\njulia> angular_diameter_dist(c, 0.7, 1.2)\n606.6521737365097 Mpc\n\njulia> luminosity_dist(c, 1.5)\n11420.338287150073 Mpc\n\njulia> luminosity_dist(u\"Gpc\", c, 1.5) # Can convert to appropriate unit\n11.420338287150074 Gpc","category":"page"},{"location":"api/#Volumes","page":"API/Reference","title":"Volumes","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"comoving_volume_element\ncomoving_volume","category":"page"},{"location":"api/#Cosmology.comoving_volume_element","page":"API/Reference","title":"Cosmology.comoving_volume_element","text":"comoving_volume_element([u::Unitlike,] c::AbstractCosmology, z)\n\nComoving volume element in Gpc out to redshift z. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.comoving_volume","page":"API/Reference","title":"Cosmology.comoving_volume","text":"comoving_volume([u::Unitlike,] c::AbstractCosmology, z)\n\nComoving volume in cubic Gpc out to redshift z. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Examples-2","page":"API/Reference","title":"Examples","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"julia> c = cosmology(OmegaM=0.26)\nCosmology.FlatLCDM{Float64}(0.69, 0.7399122024007928, 0.26, 8.77975992071536e-5)\n\njulia> comoving_volume_element(c, 2.1)\n46.74459228888612 Gpc^3\n\njulia> comoving_volume(c, 0.6)\n49.3633436631307 Gpc^3\n\njulia> comoving_volume(u\"ly^3\", c, 0.6)\n1.7127035381753e30 ly^3","category":"page"},{"location":"api/#Times","page":"API/Reference","title":"Times","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"age\nlookback_time","category":"page"},{"location":"api/#Cosmology.age","page":"API/Reference","title":"Cosmology.age","text":"age([u::Unitlike,] c::AbstractCosmology, z)\n\nAge of the universe in Gyr at redshift z. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.lookback_time","page":"API/Reference","title":"Cosmology.lookback_time","text":"lookback_time([u::Unitlike,] c::AbstractCosmology, z)\n\nDifference between age at redshift 0 and age at redshift z in Gyr. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Examples-3","page":"API/Reference","title":"Examples","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"julia> c = cosmology(OmegaM=0.26)\nCosmology.FlatLCDM{Float64}(0.69, 0.7399122024007928, 0.26, 8.77975992071536e-5)\n\njulia> age(c, 1.2)\n5.445600787626434 Gyr\n\njulia> lookback_time(u\"yr\", c, 1.2)\n8.761660748088268e9 yr","category":"page"},{"location":"#Cosmology.jl","page":"Home","title":"Cosmology.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cosmology.jl provides functions for quick cosmological calculations, written in pure Julia. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, enter pkg mode (])","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Cosmology","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, to load the package","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Cosmology","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you would like to contribute to Cosmology.jl, head over to our GitHub page and open an issue or pull request!","category":"page"},{"location":"","page":"Home","title":"Home","text":"For any new features, we ask the contributors to add any relevant unit tests and bump the package version by one minor version.","category":"page"}]
}
