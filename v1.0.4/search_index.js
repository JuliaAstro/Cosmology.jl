var documenterSearchIndex = {"docs":
[{"location":"api/#API/Reference","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"tip: Unitful\nUnitful.jl works seamlessly with Cosmology.jl. In order to use its features, make sure it is installed and imported, along with UnitfulAstro.pkg> add Unitful UnitfulAstro\njulia> using Unitful, UnitfulAstro","category":"page"},{"location":"api/#Cosmological-Models","page":"API/Reference","title":"Cosmological Models","text":"","category":"section"},{"location":"api/#Cosmology.cosmology","page":"API/Reference","title":"Cosmology.cosmology","text":"cosmology(; h = 0.69,\n            Neff = 3.04,\n            OmegaK = 0,\n            OmegaM = 0.29,\n            OmegaR = nothing,\n            Tcmb = 2.7255,\n            w0 = -1,\n            wa = 0)\n\nParameters\n\nh - Dimensionless Hubble constant\nNeff - Effective number of massless neutrino species; used to compute Ω_ν\nOmegaK - Curvature density (Ω_k)\nOmegaM - Matter density (Ω_m)\nOmegaR - Radiation density (Ω_r)\nTcmb - CMB temperature in Kelvin; used to compute Ω_γ\nw0 - CPL dark energy equation of state; w = w0 + wa(1-a)\nwa - CPL dark energy equation of state; w = w0 + wa(1-a)\n\nExamples\n\njulia> c = cosmology()\nCosmology.FlatLCDM{Float64}(0.69, 0.7099122024007928, 0.29, 8.77975992071536e-5)\n\njulia> c = cosmology(OmegaK=0.1)\nCosmology.OpenLCDM{Float64}(0.69, 0.1, 0.6099122024007929, 0.29, 8.77975992071536e-5)\n\njulia> c = cosmology(w0=-0.9, OmegaK=-0.1)\nCosmology.ClosedWCDM{Float64}(0.69, -0.1, 0.8099122024007929, 0.29, 8.77975992071536e-5, -0.9, 0.0)\n\n\n\n\n\n","category":"function"},{"location":"api/#Distances","page":"API/Reference","title":"Distances","text":"","category":"section"},{"location":"api/#Cosmology.angular_diameter_dist","page":"API/Reference","title":"Cosmology.angular_diameter_dist","text":"angular_diameter_dist([u::Unitlike,] c::AbstractCosmology, [z₁,] z₂)\n\nRatio of the proper transverse size in Mpc of an object at redshift z₂ to its angular size in radians, as seen by an observer at z₁.  Redshift z₁ defaults to 0 if omitted.  Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.comoving_radial_dist","page":"API/Reference","title":"Cosmology.comoving_radial_dist","text":"comoving_radial_dist([u::Unitlike,] c::AbstractCosmology, [z₁,] z₂)\n\nComoving radial distance (D_C) in Mpc at redshift z₂ as seen by an observer at z₁. Redshift z₁ defaults to 0 if omitted.  Will convert to compatible unit u if provided.\n\nIt's calculated as D_C = D_H0 Z, where D_H0 is the Hubble distance at the present epoch and, Z = int_z_1^z_2 fracdzE(z).\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.luminosity_dist","page":"API/Reference","title":"Cosmology.luminosity_dist","text":"luminosity_dist([u::Unitlike,] c::AbstractCosmology, z)\n\nBolometric luminosity distance in Mpc at redshift z. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.distmod","page":"API/Reference","title":"Cosmology.distmod","text":"distmod(c::AbstractCosmology, z)\n\nDistance modulus in magnitudes at redshift z.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.hubble_dist","page":"API/Reference","title":"Cosmology.hubble_dist","text":"hubble_dist(c::AbstractCosmology, z)\n\nHubble distance D_H, defined as the product of the speed of light and the Hubble time. That is, D_H(z) = c  H(z).\n\nSee also\n\nhubble_time\n\n\n\n\n\n","category":"function"},{"location":"api/#Examples","page":"API/Reference","title":"Examples","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"julia> c = cosmology(OmegaM=0.26)\nCosmology.FlatLCDM{Float64}(0.69, 0.7399122024007928, 0.26, 8.77975992071536e-5)\n\njulia> angular_diameter_dist(c, 1.2)\n1784.0089227105113 Mpc\n\njulia> angular_diameter_dist(c, 0.7, 1.2)\n606.6521737365097 Mpc\n\njulia> luminosity_dist(c, 1.5)\n11420.338287150073 Mpc\n\njulia> luminosity_dist(u\"Gpc\", c, 1.5) # Can convert to appropriate unit\n11.420338287150074 Gpc","category":"page"},{"location":"api/#Volumes","page":"API/Reference","title":"Volumes","text":"","category":"section"},{"location":"api/#Cosmology.comoving_volume_element","page":"API/Reference","title":"Cosmology.comoving_volume_element","text":"comoving_volume_element([u::Unitlike,] c::AbstractCosmology, z)\n\nComoving volume element in Gpc out to redshift z. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.comoving_volume","page":"API/Reference","title":"Cosmology.comoving_volume","text":"comoving_volume([u::Unitlike,] c::AbstractCosmology, z)\n\nComoving volume in cubic Gpc out to redshift z. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Examples-2","page":"API/Reference","title":"Examples","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"julia> c = cosmology(OmegaM=0.26)\nCosmology.FlatLCDM{Float64}(0.69, 0.7399122024007928, 0.26, 8.77975992071536e-5)\n\njulia> comoving_volume_element(c, 2.1)\n46.74459228888613 Gpc^3\n\njulia> comoving_volume(c, 0.6)\n49.3633436631307 Gpc^3\n\njulia> comoving_volume(u\"ly^3\", c, 0.6)\n1.7127035381753e30 ly^3","category":"page"},{"location":"api/#Times","page":"API/Reference","title":"Times","text":"","category":"section"},{"location":"api/#Cosmology.age","page":"API/Reference","title":"Cosmology.age","text":"age([u::Unitlike,] c::AbstractCosmology, z)\n\nAge of the universe in Gyr at redshift z. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.lookback_time","page":"API/Reference","title":"Cosmology.lookback_time","text":"lookback_time([u::Unitlike,] c::AbstractCosmology, z)\n\nDifference between age at redshift 0 and age at redshift z in Gyr. Will convert to compatible unit u if provided.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.hubble_time","page":"API/Reference","title":"Cosmology.hubble_time","text":"hubble_time(c::AbstractCosmology, z)\n\nHubble time, defined as the inverse of the Hubble parameter. That is, t_H(z) = 1H(z).\n\nSee also\n\nhubble_dist\n\n\n\n\n\n","category":"function"},{"location":"api/#Examples-3","page":"API/Reference","title":"Examples","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"julia> c = cosmology(OmegaM=0.26)\nCosmology.FlatLCDM{Float64}(0.69, 0.7399122024007928, 0.26, 8.77975992071536e-5)\n\njulia> age(c, 1.2)\n5.4454795007229455 Gyr\n\njulia> lookback_time(u\"yr\", c, 1.2)\n8.761465604385489e9 yr","category":"page"},{"location":"api/#Miscellaneous","page":"API/Reference","title":"Miscellaneous","text":"","category":"section"},{"location":"api/#Cosmology.H","page":"API/Reference","title":"Cosmology.H","text":"H(c::AbstractCosmology, z)\n\nHubble parameter at redshift z.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cosmology.scale_factor","page":"API/Reference","title":"Cosmology.scale_factor","text":"scale_factor(z)\n\nReturn the scale factor a(t) for a given redshift z(t). According to the Friedmann–Lemaître–Robertson–Walker metric it's given as a = 1(1 + z) (Schneider 2015, p. 186).\n\nA scale factor of 1, i.e., a redshift of 0, refers to the present epoch.\n\n\n\n\n\n","category":"function"},{"location":"api/#Bibliography","page":"API/Reference","title":"Bibliography","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"Schneider, P. (2015). Extragalactic Astronomy and Cosmology: An Introduction. 2nd Edition (Springer, Berlin, Heidelberg).\n\n\n\n","category":"page"},{"location":"#Cosmology.jl","page":"Home","title":"Cosmology.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: CI) (Image: Coverage Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cosmology.jl provides functions for quick cosmological calculations, written in pure Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, enter pkg mode (])","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Cosmology","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, to load the package","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Cosmology","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you would like to contribute to Cosmology.jl, head over to our GitHub page and open an issue or pull request!","category":"page"},{"location":"","page":"Home","title":"Home","text":"For any new features, we ask the contributors to add any relevant unit tests and bump the package version by one minor version.","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"The following types and methods are internal, and should not be considered safe for public use.","category":"page"},{"location":"internals/#Types","page":"Internals","title":"Types","text":"","category":"section"},{"location":"internals/#Cosmology.AbstractCosmology","page":"Internals","title":"Cosmology.AbstractCosmology","text":"abstract type AbstractCosmology\n\nAbstract supertype for all cosmological models.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Cosmology.FlatLCDM","page":"Internals","title":"Cosmology.FlatLCDM","text":"struct FlatLCDM{T<:Real} <: Cosmology.AbstractFlatCosmology\n\nΛCDM model of the universe with Ω_k = 0.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Cosmology.ClosedLCDM","page":"Internals","title":"Cosmology.ClosedLCDM","text":"struct ClosedLCDM{T<:Real} <: Cosmology.AbstractClosedCosmology\n\nΛCDM model of the universe with Ω_k  0.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Cosmology.OpenLCDM","page":"Internals","title":"Cosmology.OpenLCDM","text":"struct OpenLCDM{T<:Real} <: Cosmology.AbstractOpenCosmology\n\nΛCDM model of the universe with Ω_k  0.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Methods","page":"Internals","title":"Methods","text":"","category":"section"},{"location":"internals/#Cosmology.E","page":"Internals","title":"Cosmology.E","text":"E(c::AbstractCosmology, z)\n\nDimensionless Hubble function E(z) at redshift z. It's defined as\n\nE(z)  fracH(z)H_0 = fracH(z)(100mathrmkmsMpc) h\n\nwhere H_0 = H(z=0) is the Hubble parameter at the present epoch (Schneider 2015, p. 183).\n\n\n\n\n\n","category":"function"},{"location":"internals/#Cosmology.Z","page":"Internals","title":"Cosmology.Z","text":"Z(c::AbstractCosmology, z, nothing; kws...)\nZ(c::AbstractCosmology, z₁, z₂; kws...)\n\nThe line-of-sight comoving distance contributions for comoving radial distance.\n\nIt performs the integral\n\nZ = int_z_1^z_2 fracdzE(z) = int_a_2^a_1 fracdaa^2 E(a)\n\nwhere we can perform a change of variables with a = 1(1+z), and dz = -daa^2.\n\nIf nothing is used for the second bound of integration, it defaults to z₁ = 0 (i.e., a₁ = 1).\n\nSee also\n\ncomoving_radial_dist\n\n\n\n\n\n","category":"function"},{"location":"internals/#Cosmology.a2E","page":"Internals","title":"Cosmology.a2E","text":"a2E(c::Union{FlatLCDM,ClosedLCDM,OpenLCDM}, a)\n\nCalculates the intermediate quantity a^2 E(a). This is an internal function used to simplify computation.\n\nMathematical definition (for ΛCDM models):\n\na^2 E(a) = sqrtΩ_r + Ω_m a + Ω_k a^2 + Ω_Λ a^4\n\nwhere Ω_k = 0 for a flat cosmological model.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Cosmology.a2E-Tuple{Union{Cosmology.ClosedWCDM, Cosmology.FlatWCDM, Cosmology.OpenWCDM}, Any}","page":"Internals","title":"Cosmology.a2E","text":"a2E(c::Union{FlatWCDM,ClosedWCDM,OpenWCDM}, a)\n\nThe implementation of a^2 E(a) for WCDM models.\n\nMathematical definition (for WCDM models):\n\na^2 E(a) = sqrtΩ_r + Ω_m a + Ω_k a^2 + Ω_Λ a_de\n\nwhere a_de = exp(1 - 3 w_0 - 3 w_a) log(a) + 3 w_a (a - 1).\n\n\n\n\n\n","category":"method"},{"location":"internals/#Cosmology.hubble_dist0","page":"Internals","title":"Cosmology.hubble_dist0","text":"hubble_dist0(c::AbstractCosmology)\n\nHubble distance at redshift 0.\n\nSee also\n\nhubble_dist\n\n\n\n\n\n","category":"function"},{"location":"internals/#Cosmology.hubble_time0","page":"Internals","title":"Cosmology.hubble_time0","text":"hubble_time0(c::AbstractCosmology)\n\nHubble time at redshift 0.\n\nSee also\n\nhubble_time\n\n\n\n\n\n","category":"function"}]
}
